#!/usr/bin/ksh
#-----------------------------------------------------#
# I N I T   S E C T I O N : 
#-----------------------------------------------------#                                                                                                       
# Name    : ccSCACmp 
# Purpose: Compare SCA between:
#		1. differnt versions
#		2. same version different servers
#	   Can be use in syncronised mode as well
# 
# General Flow:  1.                      
#                2. 
#                3. 
#                 
# Usage:        ccSCACmp [-h] { -sv <source version> -tv <target version> | -sv <source version> 
#               {{-cf <file> [-d <days>]} | {-f <file> [-i]} -P/-M/-b <level_name>}
#               [-m <mail adds/group>]
# 
# Flags:        -h    Show usage.
#		-sv   Source version.
#		-tv   Target version.
#		-cf   Create report file <file name> - to compare to using -f.
#		-d    Number of days back for syncronization - used with f/cf option only.
#		-f    Compare existing SCA to report file <file name>.
#		-i    Import the exp file to the SCA.
#		-P/-M/-b  on which level the compare should run (invalid while running in -f mode):
#		          P - product      M - module     b - bb
#		-m    Mail address or Mail group in ~/.mail_adss.txt .
#                                                                                                       
# Assumptions:  The .harvest.sig & *.BCK files were excluded from the list of checked files. 
#                                             
# Dependencies (files and scripts): show_str.pl
#                                     
#                                                                                                       
# Author:  Malka Sulimani (10/4/2006)
# Supervisor:   
#                                                                                        
######################################################################################################### 
#-----------------------------------------------------#
# F U N C T I O N S   S E C T I O N 
# Function: PrintOut
# Purpose : prints to screen (and file if requested) a standard message
# Input: $1 - Message type (I/i/Info or W/w/Warning or E/e/Error N/n/None)
#        $2 - Message - free string.
#	 $3 - File - Print also to file
#	 $4 - f - use printf instead of print
#-----------------------------------------------------#
function PrintOut {
  MessageType=$1
  Message=$2
  LOutPutFile=$3
  if [[ $4 = "" ]]
    then
	PrintF=print
  else
	PrintF=print
  fi
  case $MessageType in
	
	"Info"|"I"|"i")		MessageType="  Info:"  ;;
	"Warning"|"W"|"w")	MessageType="  Warning:" 	;;
	"None"|"N"|"n")		MessageType="	" ;;
	"Error"|"E"|"e")	MessageType="  Error:" 
				Success=1
				;;
  esac

  if [[ $LOutPutFile = "" ]]
    then
	$PrintF "`/usr/bin/date '+%Y%m%d_%H%M%S'`: $MessageType $Message" 
  else
	$PrintF "`/usr/bin/date '+%Y%m%d_%H%M%S'`: $MessageType $Message" | tee -a $LOutPutFile
  fi
}


#-----------------------------------------------------#
# Function: Usage
# Purpose : print out usage and exit with error value (1)
# Input: $1 - Message - free text of error message.
#-----------------------------------------------------#
function Usage {
  Message=$1
  print "\n Input Error: $Message \n"
  print "Usage: ${ScriptName} [-h] { -sv <source version> -tv <target version> | -sv <source version>"
  print "                     {{-cf <file> [-d <days>]} | {-f <file> [-i]} -P/-M/-b <level_name> [-e <exclude_file>] [-m <mail adds/group>] }\n"
  print "          -h  	Show usage."
  print "          -sv 	Source version."
  print "          -tv 	Target version."
  print "          -cf 	Create report file <file name> - to compare to using -f."
  print "          -d    Number of days back for syncronization - used with f/cf option only."
  print "          -f  	Compare existing SCA to report file <file name>."
  print "          -i    Import the exp file to the SCA."	
  print "	   -P/-M/-b  on which level the compare should run (invalid while running in -f mode):"
  print "	             P - product      M - module     b - bb"
  print "          -m  	Mail address or Mail group in ~/.mail_adss.txt ."
  print "          -e  	File which conatains list of topics to be excloded from the comparison."
  print "                  The file should be in the following format: "
  print "			bb1:topic1,topic2,.."
  print "			bb2:topic..."


  print "          \nExamples: "
  print "		Compare between 2 versions:	    ${ScriptName} -sv v41_0 -tv v42_0 -P acm -e ~/exclude_file"
  print "		Create report file: 	   	    ${ScriptName} -sv v41_0 -cf ~/tmp/sca_410_report -M ac"
  print "		Create export report file include pack of last changed files: ${ScriptName} -sv v41_0 -cf ~/tmp/sca_410_report -d 6"
  print "		Compare SCA version to report file:                      ${ScriptName} -sv v41_0 -f ~/tmp/sca_410_report"
  print "		Compare and import SCA version according to export file: ${ScriptName} -sv v4_10 -f ~/tmp/sca_410_report -i\n"
  exit 1
}
#-----------------------------------------------------#
# Function: CheckInput
# Purpose : basic check on input params
# Input: $*
#-----------------------------------------------------#
function CheckInput {
  if [[ $* = "-h" ]] 
    then
	Usage ""
  fi
  if [[ $# -gt $MaxParams || $# -lt $MinParams ]]
   then
	Usage "Invalid Number of arguments ($#)!"
  fi
}
#-----------------------------------------------------#
# Function: InitValidInput
# Purpose : Init and Validate Input
# Input: $*
#-----------------------------------------------------#
function InitValidInput {

  EntityCount=0
  Days=0
  Imp=0
  level=""
  while  [ $# != 0 ]
   do
	case $1 in
		"-P" )  level=$1
                        name=$2
                        shift ; shift
                        ;;
		"-M" )  level=$1
                        name=$2
                        shift ; shift
                        ;;
		"-b" )  level=$1
			name=$2
			shift ; shift
			;;	
		"-i" )  Imp=1
			shift
			;;
                "-sv")  SVersion=$2 #e.g. v600
                        shift ; shift
                        ;;
                "-tv")  TVersion=$2 #e.g. v610 
			EntityCount=$(( $EntityCount + 1 ))     
			RepMode="T"
                        shift ; shift   
                        ;;      
                "-cf")  SRepFile=$2
			OutDir=`dirname $SRepFile`
			if [[ ! -d $OutDir ]]
			  then
				Usage "There is no such directory \"$OutDir\" !"	
			fi
                        if [[ `dirname $SRepFile` = "." ]]
                          then
                                SRepFile="${WDir}/${SRepFile}"
				OutDir=${WDir}
                        fi

                        EntityCount=$(( $EntityCount + 1 ))
			RepMode="C"
                        shift ; shift
                        ;;
                "-f")   TRepFile=$2
			RepMode="F"
                        if [[ ! -f $TRepFile ]]
                          then
                                Usage "There is no such file or directory \"$TRepFile\" !"        
                        fi
			if [[ `dirname $TRepFile` = "." ]]
			  then
				TRepFile="${WDir}/${TRepFile}"
			fi
                        EntityCount=$(( $EntityCount + 1 ))
                        shift ; shift
                        ;;
		"-e")   exclude_file=$2
			if [[ ! -f $exclude_file ]]
			  then
				Usage "There is no such file or directory \"$exclude_file\" !"
			fi
			shift ; shift
			;;
		"-d")   Days=$2
			if [[ ! $Days > 0 ]]
			  then
				Usage "Invalid number of days ($Days) !"
			fi
			shift ; shift
			;;
		"-m")	MailAdds=$2			
			shift ; shift
			;;
		"-h")	Usage "" 
			shift
			;;
		*)	Usage "Unknown Param $1"
			shift
			;;
	esac	
  done

  ## Validate mandatory input ##
  case $EntityCount in
	0) Usage "No Entety inputted (-tv | -cf | -f)!" ;;
	1) ;;
	*) Usage "Only one Entety should be inputted (-tv | -cf | -f)!" ;;
  esac
  
  if [[ $SVersion = ""  ]] 
    then
	Usage "Must input Source Version (-sv)!"
  fi

  if [[ $level = "" && $RepMode != "F" ]]
    then
	Usage "Must input level: -P/-M/-b !!! "
  fi

  #if the source and target version are the same there is nothing to check
  if [[ $SVersion = $TVersion  ]]
    then
        Usage "Source and Target Version are the same! There is nothing to do ..."
  fi

  #the -d option is not valid with -tv/-f
  if [[ $RepMode != "C" && $Days != 0 ]]
    then
	Usage "Invalid input! The -d option is valid with -cf only"
  fi

  # the level option is not valid while running in -f mode
  if [[ $RepMode = "F" && $level != "" ]] 
    then
	Usage "Invalid input! the -P/-M/-b is not valid whith -f!!!"
  fi

  if [[ $RepMode != "F" && $Imp = 1 ]] 
    then
	Usage "Invalid input! The -i option is valid with -f only"
  fi
}

#-----------------------------------------------------#
# Function: SendMail
# Purpose : sends mail using mailx
# Input: $1 - mail subject.
#        $2 - mail address/group.
#        $3 - mail text file.
#        $4 - mail text attachment (0 - if there is no attachement).
#-----------------------------------------------------#
function SendMail {
  MSub=$1
  MAdd=$2
  MText=$3
  MAtt=$4

#print "\nMSub=$1:MAdd=$2:MText=$3:MAtt=$4:\n"

  if [[ ! -f $MText ]]
    then
        PrintOut e "Can't find $MText to send via mail!"
        ScriptExit 1
  fi

  if [[ $MAtt = 0 ]]
    then
        $Mailx -s "$MSub" $MAdd < $MText
  else
        if [[ ! -f $MAtt ]]
          then
                PrintOut e "Can't find $MAtt to send via mail!"
                ScriptExit 1
        fi
        uuencode $MAtt /tmp/$ScriptName.$$ > $Tmp1File 
        cat $MText $Tmp1File | $Mailx -s "$MSub" $MAdd 
  fi
}

#-----------------------------------------------------#
# Function: ChkRetVal
# Purpose : print out error message if input return value -ne 0
# Input: $1 - $? of last operation.
#        $2 - Error Message.
#-----------------------------------------------------#
function ChkRetVal {
  Message=$2
  if [[ $1 -ne 0 ]] 
    then
	PrintOut e "Problems in: $Message"
	ScriptExit $1
  fi
}
#-----------------------------------------------------#
# Function: ScriptExit
# Purpose : exit with return value - print success status
# Input: $1 rerun success mode
#-----------------------------------------------------#
function ScriptExit {
  LocalSuccess=$1
  
  ## display output message of success/failure ##
  if [[ $LocalSuccess -ne 0 ]] 
    then
	PrintOut e "$ScriptName Ended with Errors."
	PrintOut e " Check log - $LogFile"
  else
	PrintOut i "$ScriptName Ended Successfully"
  fi
  
  ## Cleanup ##
  cd $WDir
  $Rm -rf $TmpDir  
  $Rm -rf $ExpTmpDir 
  
  ## Return Value ##
  exit $LocalSuccess
}

#-----------------------------------------------------#
# Function: CrtRepFile
# Purpose : Crete report file for BB version
# Input: $1 - BB name.
#	 $2 - BB version.
#-----------------------------------------------------#
function CrtRepFile {
  bb=$1
  Ver=$2
  BBPath=$CCPROJECTHOME/bb/$bb/$Ver
  cd $BBPath ; ChkRetVal $? "Failed to cd $BBPath" 
  PrintOut i "Generating report file for $bb version $Ver ..."
  $Rm -f $TmpRepFile $TmpRepFile1
  if [[ -f $exclude_file ]]
    then
  	found_bb=`grep ^$bb: $exclude_file | awk -F ^$bb: '{print $2}' | sed -e 's/,/ -e /g'`
  fi
  if [[ "$found_bb" != ""  ]]
    then
	 cksum `$Find . -type f | grep -v -e $found_bb |grep -v .harvest.sig | grep -v .BCK` > $TmpRepFile1 ; ChkRetVal $? "cksum"
  else
 	 cksum `$Find . -type f | grep -v .harvest.sig | grep -v .BCK` > $TmpRepFile1 ; ChkRetVal $? "cksum"
  fi
  cat $TmpRepFile1 | sort -n | awk '{print $1 " " $3}' > $TmpRepFile  
  cd $WDir
}

#-----------------------------------------------------#
# Function: CrtExp
# Purpose : Crete export file for BB version
# Input: $1 - BB name.
#        $2 - BB version.
#-----------------------------------------------------#
function CrtExp {
  bb=$1
  Ver=$2 
  BBPath=$CCPROJECTHOME/bb/$bb/$Ver
  cd $BBPath
  if [[ $Days != 0 ]]
    then
  	CheckFile=`$Find . -type f -mtime -${Days} |grep -v .harvest.sig | grep -v .BCK `
  	if [[ $CheckFile = "" ]]
    	  then
		PrintOut i "No files were changed in last ${Days} for $bb in $Ver"
  	else
		PrintOut i "Preparing Exp tar with last ${Days} changed files"
  		tar -cf $ExpTmpDir/$bb/$Ver/Exp.tar `$Find . -type f -mtime -${Days} |grep -v .harvest.sig | grep -v .BCK `
  		ChkRetVal $? "Failure in creating tar file"
  		gzip $ExpTmpDir/$bb/$Ver/Exp.tar ; ChkRetVal $? "gzip $ExpTmpDir/$bb/$Ver/Exp.tar" 
  	fi
  fi
}

#-----------------------------------------------------#
# Function: OpenExp
# Purpose : Extracts the export file
# Input   : $1 - BB name
#-----------------------------------------------------#
function OpenExp {
  bb=$1
  cd $ExpTmpDir/$bb/v*
  if [[ -f Exp.tar.gz ]]
     then 
	gunzip Exp.tar.gz; tar -xf Exp.tar
  fi
  
  cd $WDir

}

#-----------------------------------------------------#
# Function: PutExp
# Purpose : handles export file for BB version, put the
#           Files in the destination BB version
# Input   : $1 - the action:
#		 C - Copying files (which already exist) - will be moved aside and then copied
#		 N - Copying new files
#  	    $2 - file with listed file to work on
#	    $3 - BB name
#	    $4 - BB version
#-----------------------------------------------------#
function PutExp {
  bb=$3
  Ver=$4
  $Cp $2 $CpInSFile 
  BBPath=$CCPROJECTHOME/bb/$bb/$Ver
  cd $ExpTmpDir/$bb/v*
  case $1 in 
	"N") PrintOut i "Copying NEW Files from tar to SCA ($bb $Ver)"
	     for file in `cat $CpInSFile`
	     {
		if [[ ! -f $file ]]
		  then
			PrintOut w "The file $file was not included in the Export file - won't be synchronized ..."
		else
			file_dir=`dirname $file`
			if [[ ! -d $BBPath/$file_dir ]]
		  	  then
				PrintOut i "Creating new folder $file_dir" 
				$Mkdir -p $BBPath/$file_dir
			fi
	     		$Cp $file $BBPath/$file
		fi
	     }
	     ;;
	"C") PrintOut i "Moving files to <file>.<date>.BCK\n\t\t\tand Copying the updated files from tar ..."
	     for file in `cat $CpInSFile`
	     {
		if [[ ! -f $file ]]
		  then
			PrintOut w "The file $file was not included in the Export file - won't be synchronized ..."
		else
	    		$Mv $BBPath/$file $BBPath/$file.`/usr/bin/date '+%Y%m%d'`.BCK
	    	 	$Cp $file $BBPath/$file
		fi
	     }
	     ;;
  esac

  cd $WDir
}

#-----------------------------------------------------#
# Function: RmInSrc
# Purpose : Removes files from source version according to 
#           the target report file.
# Input: $1 - List of files which exist in source only and
#         should be removed from the source area.
#	 $2 - BB name
#	 $3 - BB version
#-----------------------------------------------------#
function RmInSrc {
  $Cp $1 $RmInSFile
  bb=$2
  Ver=$3
  BBPath=$CCPROJECTHOME/bb/$bb/$Ver
  cd $BBPath 
  PrintOut i "Removing Files from BB - $bb Version - $Ver ...."
  for file in `cat $RmInSFile`
  {
	MvCmd="$Mv $file ${file}.`/usr/bin/date '+%Y%m%d'`.BCK"
	$MvCmd
  }   

}

#-----------------------------------------------------#
# Function: RepCmp
# Purpose : Compare bewteen two files report
# Input   : $1 - BB name 
#-----------------------------------------------------#
function RepCmp {
  bb=$1
  BBLogDir=$LogDir/$bb ; $Mkdir -p $BBLogDir
  BBLogFile=$BBLogDir/$bb.diff_rep
  diff $SRepFile $TRepFile | grep "^<" | awk '{print $3}' | sort -n > $DiffSrcFile
  diff $SRepFile $TRepFile | grep "^>" | awk '{print $3}' | sort -n > $DiffTrgFile

  IsDiff="N"
  comm -12 $DiffSrcFile $DiffTrgFile > $TmpRepFile ; ChkRetVal $? "comm"
  if [[ `cat $TmpRepFile` != "" ]] 
   then
	IsDiff="Y"
	print "\n=======================================" | tee -a $BBLogFile
  	print "Different files (exist in both versions):" | tee -a $BBLogFile
  	print "=======================================" | tee -a $BBLogFile
	cat $TmpRepFile | tee -a $BBLogFile
        if [[ $Imp = 1 ]]
          then
                PutExp C $TmpRepFile $bb $SBBVersion
        fi
  fi
 
  comm -23 $DiffSrcFile $DiffTrgFile > $TmpRepFile ; ChkRetVal $? "comm"
  if [[ `cat $TmpRepFile` != "" ]] 
   then
        IsDiff="Y"
	print "\n============================="               | tee -a $BBLogFile
	print "Files in Source version only:"             | tee -a $BBLogFile
	print "============================="               | tee -a $BBLogFile
        cat $TmpRepFile | tee -a $BBLogFile
        if [[ $Imp = 1 ]]
          then
                RmInSrc $TmpRepFile $bb $SBBVersion
        fi
  fi

  comm -13 $DiffSrcFile $DiffTrgFile > $TmpRepFile ; ChkRetVal $? "comm"
  if [[ `cat $TmpRepFile` != "" ]] 
   then
        IsDiff="Y"
	print "\n========================"             | tee -a $BBLogFile
        print "Files in Target version :"               | tee -a $BBLogFile
        print "========================="               | tee -a $BBLogFile
        cat $TmpRepFile | tee -a $BBLogFile
        if [[ $Imp = 1 ]]
          then
                PutExp N $TmpRepFile $bb $SBBVersion
        fi
  fi

  if [[ "$IsDiff" != "Y" ]]
    then
	print "\n\t\t++++++++++++++++++++++++++++++++++++++++" | tee -a $BBLogFile
	print "\t\t   The BB of both versions is the same"     | tee -a $BBLogFile 
	print "\t\t+++++++++++++++++++++++++++++++++++++++++"  | tee -a $BBLogFile
  else 
	print "\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ $bb @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> $LogFile
	cat $BBLogFile >> $LogFile
  fi 

}

#-----------------------------------------------------#
# M A I N    S E C T I O N 
#-----------------------------------------------------#
## G l o b a l   V a r i a b l e s ##
WDir=`pwd`
Success=0
CcTime=/usr/local/ccmngr/bin/cctimestamp
TimeStamp=`timestamp`
MinParams=4  ; MaxParams=12
ScriptName=`basename $0`

ShowStrParams="" ; Params=$*
Parallel=1

## Shell Commands ##
Cp=/usr/bin/cp
Mv=/usr/bin/mv
Gzip=/usr/local/bin/gzip
Gunzip=/usr/local/bin/gunzip
Rm=\rm
Find=/usr/bin/find
Mkdir=/usr/bin/mkdir
Cat=/usr/bin/cat
Touch=/usr/bin/touch
Mailx=/usr/bin/mailx
SStr=`which show_str.pl`
if [[ ! -f $SStr ]] 
  then
	PrintOut e "Can't find show_str.pl"
	ScriptExit 1
fi 

## Mail
MailAdds="" ; MailSubject="${ScriptName}"

#Version
SVersion="" ; SVer="" ; SvVer=""
SBBVersion=""
TVersion="" ; TVer="" ; TvVer=""

#default report file
SRepFile="" ; TRepFile=""
## Log/Tmp/Entity Dir/File ##
LogDir=${HOME}/log/$ScriptName/$TimeStamp ; $Mkdir -p $LogDir
TmpDir=/tmp/$ScriptName.$$ ; $Mkdir -p $TmpDir 
TmpFile=$TmpDir/$ScriptName.TmpFile.$$ ; $Touch $TmpFile
Tmp1File=$TmpDir/$ScriptName.Tmp1File.$$ ; $Touch $Tmp1File
TmpRepFile=$TmpDir/$ScriptName.TmpRepFile.$$
TmpRepFile1=$TmpDir/$ScriptName.TmpRepFile1.$$
TmpSRepFile=$TmpDir/$ScriptName.TmpSRepFile.$$
TmpTRepFile=$TmpDir/$ScriptName.TmpTRepFile.$$
DiffSrcFile=$TmpDir/$ScriptName.DiffSrcFile.$$
DiffTrgFile=$TmpDir/$ScriptName.DiffTrgFile.$$
SRepFile=$TmpDir/$ScriptName.SRepFile.$$
TRepFile=$TmpDir/$ScriptName.TRepFile.$$
RmInSFile=$TmpDir/$ScriptName.RmInSFile$$ ; $Touch $RmInSFile
CpInSFile=$TmpDir/$ScriptName.CpInSFile$$ ; $Touch $CpInSFile

## Trap ##
trap  "PrintOut e 'terminated due to ctrl-c' ; ScriptExit 1" INT TERM

## Input arguments ##
CheckInput $*
InitValidInput $*

if [[ $TVersion = ""  ]]
then
	LogFile=$LogDir/$ScriptName.$SVersion.$TimeStamp.log
else
	LogFile=$LogDir/$ScriptName.$SVersion.$TVersion.$TimeStamp.log
fi

##  M a i n   A l g o r i t h m  ##
PrintOut i "$ScriptName Start working on: $Params"
#Check the mode report
case $RepMode in
	"T") for line in `$SStr $level $name -v $SVersion -t ""`
	     {
		bb=`echo $line | awk -F ":" '{print $5}'`
		SBBVersion=`echo $line | awk -F ":" '{print $6}'`
		CrtRepFile $bb $SBBVersion
	     	$Cp $TmpRepFile $SRepFile ; ChkRetVal $? "$Cp $TmpRepFile $SRepFile"
             	TBBVersion=`$SStr $level $name -v $TVersion -t "" | grep -w $bb | sort -u | awk -F ":" '{print $6}'`
		if [[ $TBBVersion = "" ]]
                  then
			print "\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ $bb @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> $LogFile
                        PrintOut w "The BB $bb doesn't exist in version $TVersion\nSkipping on this BB ..."   | tee -a $LogFile 
		else
	     		CrtRepFile $bb $TBBVersion
             		$Cp $TmpRepFile $TRepFile
	     		RepCmp $bb
		fi
	     }
	     	if [[ $MailAdds != "" ]]
	         then
	     		SendMail "$CCPROJNAME - $ScriptName - SCA diff report for $SBBVersion & $TBBVersion" $MailAdds $LogFile 0
	     	fi
	     	;;
	"C") ExpTmpDir=${OutDir}/ExpTmpDir.$TimeStamp
	     $Mkdir -p $ExpTmpDir ; ChkRetVal $? "Failed in: $Mkdir -p $ExpTmpDir"
	     for line in `$SStr $level $name -v $SVersion -t ""`
             {
                bb=`echo $line | awk -F ":" '{print $5}'`
                SBBVersion=`echo $line | awk -F ":" '{print $6}'`
		$Mkdir -p $ExpTmpDir/$bb/$SBBVersion ; ChkRetVal $? "Failed in: $Mkdir -p $ExpTmpDir/$bb/$SBBVersion"
		CrtRepFile $bb $SBBVersion 
	     	$Cp ${TmpRepFile} $ExpTmpDir/$bb/${bb}_${Ver}_report ; ChkRetVal $? "$Cp $TmpRepFile $ExpTmpDir/$bb/${bb}_${Ver}_report"
	   	CrtExp $bb $SBBVersion
	     }
	     cd $ExpTmpDir
	     tar -cf $SRepFile * ; ChkRetVal $? "$tar -cf $SRepFile *"
	     print "\nThe Report log file was created as \"$SRepFile\"\n" 
	     print "Attached the report log file" > $TmpFile
             if [[ $MailAdds != "" ]]
                then
			SendMail "$CCPROJNAME - $ScriptName - SDK report for $SBBVersion" $MailAdds $TmpFile $SRepFile
             fi 
	     ;;
	"F") ExpDir=`dirname $TRepFile`
  	     ExpTmpDir=$ExpDir/ExpTmpDir.$TimeStamp
 	     $Mkdir -p $ExpTmpDir ; cd $ExpTmpDir
  	     tar -xf $TRepFile ; ChkRetVal $? "Invalid input file (expected a tar file)"
	     for bb in `ls -d *`
             {
		
                SBBVersion=`$SStr -b $bb -v $SVersion -t "" | sort -u | awk -F ":" '{print $6}'`
		if [[ $SBBVersion = "" ]]
                  then
			print "\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ $bb @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> $LogFile
                        PrintOut w "The BB $bb doesn't exist in version $SVersion\nSkipping on this BB ..." >> $LogFile
		else
			OpenExp $bb
			TRepFile=`ls $ExpTmpDir/$bb/*_report` ; ChkRetVal $? "Invalid input file (missing ${bb}_<version>_report file)"
	     		CrtRepFile $bb $SBBVersion
             		$Cp $TmpRepFile $SRepFile ; ChkRetVal $? "$Cp $TmpRepFile $SRepFile"
	     		RepCmp $bb
		fi
	     }
            if [[ $MailAdds != "" ]]
              then
	    	SendMail "$CCPROJNAME - $ScriptName - SDK diff report for $SBBVersion & $TRepFile" $MailAdds $LogFile 0
            fi 
	    ;;
esac

if [[ $RepMode = "T" ]]
  then
	print "\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        print "The SDK diff report file can be found at:"
        print " $LogFile"
        print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
fi
if [[ $SBBVersion = "" ]]
  then 
	PrintOut e "Please check your input for $level & $name in $SVersion"
fi
	
ScriptExit $Success
